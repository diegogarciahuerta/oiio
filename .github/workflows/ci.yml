# Copyright 2008-present Contributors to the OpenImageIO project.
# SPDX-License-Identifier: BSD-3-Clause
# https://github.com/OpenImageIO/oiio/blob/master/LICENSE.md

name: CI

on:
  push:
    # Skip jobs when only documentation files are changed
    paths-ignore:
      - '**.md'
      - '**.rst'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**.rst'
  schedule:
    # Full nightly build
    - cron: "0 4 * * *"


jobs:
  windows-vs2019:
    name: "Windows VS2019"
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v2
      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1
      - name: all
        shell: bash
        env:
          PYTHON_VERSION: 3.6
          CMAKE_GENERATOR: "Visual Studio 16 2019"
          OPENEXR_VERSION: v2.4.1
          SKIP_TESTS: 1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-win-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}
          path: build

  windows-vs2017:
    # windows build
    name: "Windows VS2017"
    runs-on: windows-2016
    steps:
      - uses: actions/checkout@v2
      - name: Setup Nuget.exe
        uses: warrenbuckley/Setup-Nuget@v1
      - name: all
        shell: bash
        env:
          PYTHON_VERSION: 3.6
          CMAKE_GENERATOR: "Visual Studio 15 2017 Win64"
          OPENEXR_VERSION: v2.4.1
          SKIP_TESTS: 1
          #MY_CMAKE_FLAGS: -DUSE_PYTHON=0
          USE_NINJA: 0
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-win-installdeps.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ github.job }}
          path: build

  sanitizer:
    # Run sanitizers. These don't need to run on every push. Just PRs, nightly
    # builds, or if the branch name contains one of several tokens: san,
    # gh, RB, release, or master.
    name: "Sanitizers"
    runs-on: ubuntu-18.04
    if: github.event_name == 'pull_request' || github.event_name == 'schedule' || contains(github.ref, 'san') || contains(github.ref, 'RB') || contains(github.ref, 'release') || contains(github.ref, 'master') || contains(github.ref, 'gh')
    container:
      image: aswf/ci-osl:2020
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          CXX: g++
          CC: gcc
          CMAKE_CXX_STANDARD: 14
          PYTHON_VERSION: 3.7
          USE_PYTHON: 0
          SANITIZE: address
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: build/*/testsuite/*/*.*

  clang-format:
    # Test formatting. This test entry doesn't do a full build, it just runs
    # clang-format on everything, and passes if nothing is misformatted.
    # Upon failure, the build artifact will be the full source code with the
    # formatting fixed (diffs will also appear in the console output).
    name: "clang-format verification"
    runs-on: ubuntu-18.04
    container:
      image: aswf/ci-osl:2021
    steps:
      - uses: actions/checkout@v2
      - name: all
        env:
          BUILDTARGET: clang-format
          PYTHON_VERSION: 3.7
          SKIP_TESTS: 1
        run: |
            source src/build-scripts/ci-startup.bash
            source src/build-scripts/gh-installdeps-centos.bash
            source src/build-scripts/ci-build-and-test.bash
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{ github.job }}
          path: src/*/*.{cpp,h}
